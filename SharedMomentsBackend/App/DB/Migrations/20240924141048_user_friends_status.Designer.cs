// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharedMomentsBackend.App.DB;

#nullable disable

namespace SharedMomentsBackend.App.DB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240924141048_user_friends_status")]
    partial class user_friends_status
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.AlbumUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("AlbumUsers");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Moment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Moments");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.MomentResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MomentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MomentId");

                    b.HasIndex("ResourceId");

                    b.ToTable("MomentResources");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.MomentUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MomentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MomentId");

                    b.HasIndex("UserId");

                    b.ToTable("MomentUsers");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Action", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4cf3915-8d94-475e-91bb-74610079f158"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7404),
                            IsActive = true,
                            Name = "Create",
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7404)
                        },
                        new
                        {
                            Id = new Guid("0b469237-ddce-41d5-9224-1ec1705d45d3"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7418),
                            IsActive = true,
                            Name = "Read",
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7418)
                        },
                        new
                        {
                            Id = new Guid("697df0c9-6c3e-4b5b-8033-af7ac37538ce"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7420),
                            IsActive = true,
                            Name = "Update",
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7420)
                        },
                        new
                        {
                            Id = new Guid("113cd90f-1d17-4dd2-adc8-2b9c6fe9a46a"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7422),
                            IsActive = true,
                            Name = "Delete",
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7422)
                        },
                        new
                        {
                            Id = new Guid("fe63ace1-d61b-4ef6-90e2-13a8df8b8f9f"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7424),
                            IsActive = true,
                            Name = "ChangeStatus",
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7424)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("460d20b1-9e96-47a7-bfe2-eaefa1d70510"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7357),
                            IsActive = true,
                            Name = "Users",
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7357)
                        },
                        new
                        {
                            Id = new Guid("5d45d4b2-586e-4aa3-99e1-61f99e2ecaff"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7362),
                            IsActive = true,
                            Name = "Moments",
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7362)
                        },
                        new
                        {
                            Id = new Guid("57a99491-9bd6-496d-a0d3-0b40b3a72f63"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7364),
                            IsActive = true,
                            Name = "Albums",
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7365)
                        },
                        new
                        {
                            Id = new Guid("82f1df67-bbb8-4524-8195-c999dbce5e79"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7366),
                            IsActive = true,
                            Name = "Resources",
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7367)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.ModuleAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleActions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8feb61c2-acc0-456b-933e-bdb5bde3f659"),
                            ActionId = new Guid("b4cf3915-8d94-475e-91bb-74610079f158"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7455),
                            IsActive = true,
                            ModuleId = new Guid("460d20b1-9e96-47a7-bfe2-eaefa1d70510"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7456)
                        },
                        new
                        {
                            Id = new Guid("dfd0a636-36f8-46d1-9340-dc3874dce92b"),
                            ActionId = new Guid("0b469237-ddce-41d5-9224-1ec1705d45d3"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7460),
                            IsActive = true,
                            ModuleId = new Guid("460d20b1-9e96-47a7-bfe2-eaefa1d70510"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7460)
                        },
                        new
                        {
                            Id = new Guid("7c332908-0e1a-4d3f-8df9-3f03d35f9924"),
                            ActionId = new Guid("697df0c9-6c3e-4b5b-8033-af7ac37538ce"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7462),
                            IsActive = true,
                            ModuleId = new Guid("460d20b1-9e96-47a7-bfe2-eaefa1d70510"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7462)
                        },
                        new
                        {
                            Id = new Guid("877f4c3b-7492-406f-a755-36b49ac1264b"),
                            ActionId = new Guid("113cd90f-1d17-4dd2-adc8-2b9c6fe9a46a"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7465),
                            IsActive = true,
                            ModuleId = new Guid("460d20b1-9e96-47a7-bfe2-eaefa1d70510"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7465)
                        },
                        new
                        {
                            Id = new Guid("3b2b40c8-f0ca-42e1-ba2d-ea9ffa128d42"),
                            ActionId = new Guid("fe63ace1-d61b-4ef6-90e2-13a8df8b8f9f"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7467),
                            IsActive = true,
                            ModuleId = new Guid("460d20b1-9e96-47a7-bfe2-eaefa1d70510"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7467)
                        },
                        new
                        {
                            Id = new Guid("89cd8602-4b9d-4730-99ec-b97ef2877020"),
                            ActionId = new Guid("b4cf3915-8d94-475e-91bb-74610079f158"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7470),
                            IsActive = true,
                            ModuleId = new Guid("5d45d4b2-586e-4aa3-99e1-61f99e2ecaff"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7470)
                        },
                        new
                        {
                            Id = new Guid("e1c6f5c6-d92e-40a6-ae29-5880b851c45e"),
                            ActionId = new Guid("0b469237-ddce-41d5-9224-1ec1705d45d3"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7471),
                            IsActive = true,
                            ModuleId = new Guid("5d45d4b2-586e-4aa3-99e1-61f99e2ecaff"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7472)
                        },
                        new
                        {
                            Id = new Guid("065ca581-25c2-4d6d-9d60-0f14aaccbf81"),
                            ActionId = new Guid("697df0c9-6c3e-4b5b-8033-af7ac37538ce"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7473),
                            IsActive = true,
                            ModuleId = new Guid("5d45d4b2-586e-4aa3-99e1-61f99e2ecaff"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7473)
                        },
                        new
                        {
                            Id = new Guid("30cf1c08-78a5-4c23-a3de-68ae7a129a58"),
                            ActionId = new Guid("113cd90f-1d17-4dd2-adc8-2b9c6fe9a46a"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7474),
                            IsActive = true,
                            ModuleId = new Guid("5d45d4b2-586e-4aa3-99e1-61f99e2ecaff"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7474)
                        },
                        new
                        {
                            Id = new Guid("08ed0564-a9fc-4bb9-bc60-7004bdd3112a"),
                            ActionId = new Guid("fe63ace1-d61b-4ef6-90e2-13a8df8b8f9f"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7476),
                            IsActive = true,
                            ModuleId = new Guid("5d45d4b2-586e-4aa3-99e1-61f99e2ecaff"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7477)
                        },
                        new
                        {
                            Id = new Guid("ea289d70-de03-49ed-b2cb-14baf210c483"),
                            ActionId = new Guid("b4cf3915-8d94-475e-91bb-74610079f158"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7478),
                            IsActive = true,
                            ModuleId = new Guid("57a99491-9bd6-496d-a0d3-0b40b3a72f63"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7478)
                        },
                        new
                        {
                            Id = new Guid("c6ee952c-c968-463f-a07f-440f377e0165"),
                            ActionId = new Guid("0b469237-ddce-41d5-9224-1ec1705d45d3"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7481),
                            IsActive = true,
                            ModuleId = new Guid("57a99491-9bd6-496d-a0d3-0b40b3a72f63"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7481)
                        },
                        new
                        {
                            Id = new Guid("c79e063a-3914-404b-810b-c2bd6f53fa88"),
                            ActionId = new Guid("697df0c9-6c3e-4b5b-8033-af7ac37538ce"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7482),
                            IsActive = true,
                            ModuleId = new Guid("57a99491-9bd6-496d-a0d3-0b40b3a72f63"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7482)
                        },
                        new
                        {
                            Id = new Guid("8ea7a9e8-bdcf-4d1f-9d7a-9aa87f07c3e5"),
                            ActionId = new Guid("113cd90f-1d17-4dd2-adc8-2b9c6fe9a46a"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7483),
                            IsActive = true,
                            ModuleId = new Guid("57a99491-9bd6-496d-a0d3-0b40b3a72f63"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7484)
                        },
                        new
                        {
                            Id = new Guid("b105cf60-c1b4-467a-bb1e-8e88f288e5ca"),
                            ActionId = new Guid("fe63ace1-d61b-4ef6-90e2-13a8df8b8f9f"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7485),
                            IsActive = true,
                            ModuleId = new Guid("57a99491-9bd6-496d-a0d3-0b40b3a72f63"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7485)
                        },
                        new
                        {
                            Id = new Guid("7720e833-e65e-42d5-b36d-8a57a616cc7b"),
                            ActionId = new Guid("b4cf3915-8d94-475e-91bb-74610079f158"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7486),
                            IsActive = true,
                            ModuleId = new Guid("82f1df67-bbb8-4524-8195-c999dbce5e79"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7487)
                        },
                        new
                        {
                            Id = new Guid("561366ab-3896-4754-99e7-ca7665ddc2d6"),
                            ActionId = new Guid("0b469237-ddce-41d5-9224-1ec1705d45d3"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7488),
                            IsActive = true,
                            ModuleId = new Guid("82f1df67-bbb8-4524-8195-c999dbce5e79"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7488)
                        },
                        new
                        {
                            Id = new Guid("87ff39dd-7f8d-4aa7-91f0-83ec7e83b39f"),
                            ActionId = new Guid("697df0c9-6c3e-4b5b-8033-af7ac37538ce"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7490),
                            IsActive = true,
                            ModuleId = new Guid("82f1df67-bbb8-4524-8195-c999dbce5e79"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7490)
                        },
                        new
                        {
                            Id = new Guid("08b6ae51-589a-4a28-8f3a-9e1620cc4ea3"),
                            ActionId = new Guid("113cd90f-1d17-4dd2-adc8-2b9c6fe9a46a"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7491),
                            IsActive = true,
                            ModuleId = new Guid("82f1df67-bbb8-4524-8195-c999dbce5e79"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7491)
                        },
                        new
                        {
                            Id = new Guid("5b807c70-0391-438a-bd70-ee768e6e7dce"),
                            ActionId = new Guid("fe63ace1-d61b-4ef6-90e2-13a8df8b8f9f"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7494),
                            IsActive = true,
                            ModuleId = new Guid("82f1df67-bbb8-4524-8195-c999dbce5e79"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7495)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModuleActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ModuleActionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f5cf71f-9698-4fcd-ac27-0a7007b00a27"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7559),
                            IsActive = true,
                            ModuleActionId = new Guid("8feb61c2-acc0-456b-933e-bdb5bde3f659"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7559)
                        },
                        new
                        {
                            Id = new Guid("402d4b1a-08c0-402e-bf3d-3970be79f627"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7562),
                            IsActive = true,
                            ModuleActionId = new Guid("dfd0a636-36f8-46d1-9340-dc3874dce92b"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7562)
                        },
                        new
                        {
                            Id = new Guid("ee095c4b-eeb5-413a-8578-b673bff92883"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7563),
                            IsActive = true,
                            ModuleActionId = new Guid("7c332908-0e1a-4d3f-8df9-3f03d35f9924"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7564)
                        },
                        new
                        {
                            Id = new Guid("e0d426b3-6b4d-458f-ae4e-a730c2ef7408"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7565),
                            IsActive = true,
                            ModuleActionId = new Guid("877f4c3b-7492-406f-a755-36b49ac1264b"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7565)
                        },
                        new
                        {
                            Id = new Guid("9cbe9810-4345-48c4-91dc-ee245323fb18"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7566),
                            IsActive = true,
                            ModuleActionId = new Guid("3b2b40c8-f0ca-42e1-ba2d-ea9ffa128d42"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7567)
                        },
                        new
                        {
                            Id = new Guid("84d0d068-28c7-4331-822c-7bd46596c44e"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7568),
                            IsActive = true,
                            ModuleActionId = new Guid("89cd8602-4b9d-4730-99ec-b97ef2877020"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7568)
                        },
                        new
                        {
                            Id = new Guid("329825f0-c10b-4c87-88f0-cb5daf548a2c"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7569),
                            IsActive = true,
                            ModuleActionId = new Guid("e1c6f5c6-d92e-40a6-ae29-5880b851c45e"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7569)
                        },
                        new
                        {
                            Id = new Guid("2811558f-01ea-4a81-aa9f-64785fa2cb23"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7570),
                            IsActive = true,
                            ModuleActionId = new Guid("065ca581-25c2-4d6d-9d60-0f14aaccbf81"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7571)
                        },
                        new
                        {
                            Id = new Guid("bf1f1bb8-b0b8-4479-a10d-4b75738b3cde"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7574),
                            IsActive = true,
                            ModuleActionId = new Guid("30cf1c08-78a5-4c23-a3de-68ae7a129a58"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7574)
                        },
                        new
                        {
                            Id = new Guid("2190f638-8f09-41e0-9e1c-cca6f7f09e28"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7575),
                            IsActive = true,
                            ModuleActionId = new Guid("08ed0564-a9fc-4bb9-bc60-7004bdd3112a"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7575)
                        },
                        new
                        {
                            Id = new Guid("776004f5-98f1-492c-a28c-0d424d63a0c9"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7576),
                            IsActive = true,
                            ModuleActionId = new Guid("ea289d70-de03-49ed-b2cb-14baf210c483"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7577)
                        },
                        new
                        {
                            Id = new Guid("3481191c-8104-4b09-be4c-230013a7c07b"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7578),
                            IsActive = true,
                            ModuleActionId = new Guid("c6ee952c-c968-463f-a07f-440f377e0165"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7578)
                        },
                        new
                        {
                            Id = new Guid("f26327d0-6265-42da-b3b1-9194f43e7752"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7579),
                            IsActive = true,
                            ModuleActionId = new Guid("c79e063a-3914-404b-810b-c2bd6f53fa88"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7579)
                        },
                        new
                        {
                            Id = new Guid("86729632-d855-4430-81f5-2a33d16158b4"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7580),
                            IsActive = true,
                            ModuleActionId = new Guid("8ea7a9e8-bdcf-4d1f-9d7a-9aa87f07c3e5"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7580)
                        },
                        new
                        {
                            Id = new Guid("e2216ccb-43b8-44dc-b7d8-b7fba6ec85ee"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7581),
                            IsActive = true,
                            ModuleActionId = new Guid("b105cf60-c1b4-467a-bb1e-8e88f288e5ca"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7582)
                        },
                        new
                        {
                            Id = new Guid("571beb8e-073f-43d5-b237-858921750fa0"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7583),
                            IsActive = true,
                            ModuleActionId = new Guid("7720e833-e65e-42d5-b36d-8a57a616cc7b"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7583)
                        },
                        new
                        {
                            Id = new Guid("91a50df3-de8d-47d1-b7f7-125ec4f6427d"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7586),
                            IsActive = true,
                            ModuleActionId = new Guid("561366ab-3896-4754-99e7-ca7665ddc2d6"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7586)
                        },
                        new
                        {
                            Id = new Guid("963096d9-71a4-404b-873e-79f3e7cbf38c"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7617),
                            IsActive = true,
                            ModuleActionId = new Guid("87ff39dd-7f8d-4aa7-91f0-83ec7e83b39f"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7617)
                        },
                        new
                        {
                            Id = new Guid("a7e28263-532e-4b39-b64a-77a6d6ec2dac"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7618),
                            IsActive = true,
                            ModuleActionId = new Guid("08b6ae51-589a-4a28-8f3a-9e1620cc4ea3"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7619)
                        },
                        new
                        {
                            Id = new Guid("79b711b2-27e9-4d9d-ae73-c4f2cd0faab6"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7620),
                            IsActive = true,
                            ModuleActionId = new Guid("5b807c70-0391-438a-bd70-ee768e6e7dce"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7620)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(6217),
                            IsActive = true,
                            Name = "Admin",
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(6221)
                        },
                        new
                        {
                            Id = new Guid("20db92a1-12b6-4e38-8579-0f646283a47a"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(6225),
                            IsActive = true,
                            Name = "User",
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(6225)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("02fa69dc-752b-44a9-b447-22dfb1d41db8"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7695),
                            IsActive = true,
                            PermissionId = new Guid("4f5cf71f-9698-4fcd-ac27-0a7007b00a27"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7696)
                        },
                        new
                        {
                            Id = new Guid("026a35af-167e-45ea-bc11-264738dc93f0"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7730),
                            IsActive = true,
                            PermissionId = new Guid("402d4b1a-08c0-402e-bf3d-3970be79f627"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7730)
                        },
                        new
                        {
                            Id = new Guid("6efa0670-4c1e-47b1-a1eb-3c150b1388ed"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7738),
                            IsActive = true,
                            PermissionId = new Guid("ee095c4b-eeb5-413a-8578-b673bff92883"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7738)
                        },
                        new
                        {
                            Id = new Guid("510452ad-bf08-432b-a096-0e7ea41e444e"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7744),
                            IsActive = true,
                            PermissionId = new Guid("e0d426b3-6b4d-458f-ae4e-a730c2ef7408"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7744)
                        },
                        new
                        {
                            Id = new Guid("3be3020f-6a1d-4424-9dfe-cd4641fe4f1c"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7752),
                            IsActive = true,
                            PermissionId = new Guid("9cbe9810-4345-48c4-91dc-ee245323fb18"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7752)
                        },
                        new
                        {
                            Id = new Guid("70fa7318-651a-4b7d-bace-9d666377a7ed"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7765),
                            IsActive = true,
                            PermissionId = new Guid("9cbe9810-4345-48c4-91dc-ee245323fb18"),
                            RoleId = new Guid("20db92a1-12b6-4e38-8579-0f646283a47a"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7765)
                        },
                        new
                        {
                            Id = new Guid("79f5a5af-888f-47f7-b10f-617c6d5f3081"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7768),
                            IsActive = true,
                            PermissionId = new Guid("84d0d068-28c7-4331-822c-7bd46596c44e"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7768)
                        },
                        new
                        {
                            Id = new Guid("edec0caa-2b04-4ef9-8004-03ec9002d8f2"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7782),
                            IsActive = true,
                            PermissionId = new Guid("84d0d068-28c7-4331-822c-7bd46596c44e"),
                            RoleId = new Guid("20db92a1-12b6-4e38-8579-0f646283a47a"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7783)
                        },
                        new
                        {
                            Id = new Guid("c33cdb57-b8cc-4d8e-ae01-db572532a537"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7786),
                            IsActive = true,
                            PermissionId = new Guid("329825f0-c10b-4c87-88f0-cb5daf548a2c"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7786)
                        },
                        new
                        {
                            Id = new Guid("a310060d-ffc0-4401-90ec-1600f257793e"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7795),
                            IsActive = true,
                            PermissionId = new Guid("329825f0-c10b-4c87-88f0-cb5daf548a2c"),
                            RoleId = new Guid("20db92a1-12b6-4e38-8579-0f646283a47a"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7796)
                        },
                        new
                        {
                            Id = new Guid("7cfc7a3a-10a4-4c26-878e-49c841e34122"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7797),
                            IsActive = true,
                            PermissionId = new Guid("2811558f-01ea-4a81-aa9f-64785fa2cb23"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7798)
                        },
                        new
                        {
                            Id = new Guid("6f5f6018-879d-445f-b0f7-d98057f1d8f1"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7805),
                            IsActive = true,
                            PermissionId = new Guid("2811558f-01ea-4a81-aa9f-64785fa2cb23"),
                            RoleId = new Guid("20db92a1-12b6-4e38-8579-0f646283a47a"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7805)
                        },
                        new
                        {
                            Id = new Guid("97ebae1c-ffbd-4334-8408-0795460049fa"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7810),
                            IsActive = true,
                            PermissionId = new Guid("bf1f1bb8-b0b8-4479-a10d-4b75738b3cde"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7810)
                        },
                        new
                        {
                            Id = new Guid("dbb1d913-c270-473f-857b-a4410c5b822e"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7819),
                            IsActive = true,
                            PermissionId = new Guid("2190f638-8f09-41e0-9e1c-cca6f7f09e28"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7819)
                        },
                        new
                        {
                            Id = new Guid("2e91d916-dc9a-4722-90b6-c1d84d5a497d"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7827),
                            IsActive = true,
                            PermissionId = new Guid("2190f638-8f09-41e0-9e1c-cca6f7f09e28"),
                            RoleId = new Guid("20db92a1-12b6-4e38-8579-0f646283a47a"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7827)
                        },
                        new
                        {
                            Id = new Guid("0ae33f65-c437-487f-a5ce-aa7068bb76ab"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7829),
                            IsActive = true,
                            PermissionId = new Guid("776004f5-98f1-492c-a28c-0d424d63a0c9"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7829)
                        },
                        new
                        {
                            Id = new Guid("f7f7ca35-a042-4ee3-ad05-fa16372392f0"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7836),
                            IsActive = true,
                            PermissionId = new Guid("776004f5-98f1-492c-a28c-0d424d63a0c9"),
                            RoleId = new Guid("20db92a1-12b6-4e38-8579-0f646283a47a"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7837)
                        },
                        new
                        {
                            Id = new Guid("a246c2a0-10e8-4c6d-991e-6ff11a605902"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7839),
                            IsActive = true,
                            PermissionId = new Guid("3481191c-8104-4b09-be4c-230013a7c07b"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7840)
                        },
                        new
                        {
                            Id = new Guid("26a8681c-9117-47d2-bc70-c6087b79a26a"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7847),
                            IsActive = true,
                            PermissionId = new Guid("3481191c-8104-4b09-be4c-230013a7c07b"),
                            RoleId = new Guid("20db92a1-12b6-4e38-8579-0f646283a47a"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7847)
                        },
                        new
                        {
                            Id = new Guid("f2f2d544-281f-4482-b320-0d7fbdc91920"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7849),
                            IsActive = true,
                            PermissionId = new Guid("f26327d0-6265-42da-b3b1-9194f43e7752"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7850)
                        },
                        new
                        {
                            Id = new Guid("d77ba6fd-3f07-4dee-bf2b-aaedfd49a744"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7886),
                            IsActive = true,
                            PermissionId = new Guid("f26327d0-6265-42da-b3b1-9194f43e7752"),
                            RoleId = new Guid("20db92a1-12b6-4e38-8579-0f646283a47a"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7887)
                        },
                        new
                        {
                            Id = new Guid("0b41a382-7003-4fb8-abfd-939d030f7b67"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7889),
                            IsActive = true,
                            PermissionId = new Guid("86729632-d855-4430-81f5-2a33d16158b4"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7890)
                        },
                        new
                        {
                            Id = new Guid("9e1bbe86-87bc-4843-a5b1-fbee794ceb5c"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7900),
                            IsActive = true,
                            PermissionId = new Guid("e2216ccb-43b8-44dc-b7d8-b7fba6ec85ee"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7900)
                        },
                        new
                        {
                            Id = new Guid("47b728ee-0db0-448d-bc3d-23939a217a11"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7909),
                            IsActive = true,
                            PermissionId = new Guid("e2216ccb-43b8-44dc-b7d8-b7fba6ec85ee"),
                            RoleId = new Guid("20db92a1-12b6-4e38-8579-0f646283a47a"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7909)
                        },
                        new
                        {
                            Id = new Guid("4f5b73a4-7172-4617-9b8e-014bf7bc77a2"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7911),
                            IsActive = true,
                            PermissionId = new Guid("571beb8e-073f-43d5-b237-858921750fa0"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7912)
                        },
                        new
                        {
                            Id = new Guid("4bb38e57-460d-40e5-a2c7-5ed1911a3ba8"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7921),
                            IsActive = true,
                            PermissionId = new Guid("91a50df3-de8d-47d1-b7f7-125ec4f6427d"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7921)
                        },
                        new
                        {
                            Id = new Guid("af379af9-49c7-43d5-bfa6-67d017a1a672"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7932),
                            IsActive = true,
                            PermissionId = new Guid("963096d9-71a4-404b-873e-79f3e7cbf38c"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7933)
                        },
                        new
                        {
                            Id = new Guid("3bcbb11a-a04e-4a20-bc30-63b463577dac"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7942),
                            IsActive = true,
                            PermissionId = new Guid("a7e28263-532e-4b39-b64a-77a6d6ec2dac"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7942)
                        },
                        new
                        {
                            Id = new Guid("2f78dca6-b1e9-4e67-88e9-edb198348c96"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7953),
                            IsActive = true,
                            PermissionId = new Guid("79b711b2-27e9-4d9d-ae73-c4f2cd0faab6"),
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7953)
                        },
                        new
                        {
                            Id = new Guid("92227a14-e665-4507-9661-d872b0d9d20b"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7968),
                            IsActive = true,
                            PermissionId = new Guid("79b711b2-27e9-4d9d-ae73-c4f2cd0faab6"),
                            RoleId = new Guid("20db92a1-12b6-4e38-8579-0f646283a47a"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(7969)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e975e2c1-1422-4ff3-882f-b87db827eb21"),
                            CreatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(6355),
                            DateOfBirth = new DateTime(2000, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alvaroku123@gmail.com",
                            IsActive = true,
                            Name = "Alvaro Kú",
                            PasswordHash = "b2867617492e26c338ab49f72afabc984d798b59755a27e312b953716ae964d7",
                            PhoneNumber = "9919596720",
                            RoleId = new Guid("dc41e204-95b3-4d29-be09-b0c7bc803765"),
                            UpdatedAt = new DateTime(2024, 9, 24, 14, 10, 47, 741, DateTimeKind.Utc).AddTicks(6356)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.UserFriend", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Album", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.AlbumUser", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Album", "Album")
                        .WithMany("AlbumUsers")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.User", "User")
                        .WithMany("AlbumUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Moment", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Album", "Album")
                        .WithMany("Moments")
                        .HasForeignKey("AlbumId");

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.MomentResource", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Moment", "Moment")
                        .WithMany("MomentResources")
                        .HasForeignKey("MomentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Resource", "Resource")
                        .WithMany("MomentResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moment");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.MomentUser", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Moment", "Moment")
                        .WithMany("MomentUsers")
                        .HasForeignKey("MomentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.User", "User")
                        .WithMany("MomentUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.ModuleAction", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Security.Action", "Action")
                        .WithMany("ModuleActions")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Security.Module", "Module")
                        .WithMany("ModuleActions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Permission", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Security.ModuleAction", "ModuleAction")
                        .WithMany()
                        .HasForeignKey("ModuleActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleAction");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.RolePermission", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Security.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Security.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.User", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Resource", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Security.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.UserFriend", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.User", "User")
                        .WithMany("UserFriends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Album", b =>
                {
                    b.Navigation("AlbumUsers");

                    b.Navigation("Moments");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Moment", b =>
                {
                    b.Navigation("MomentResources");

                    b.Navigation("MomentUsers");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Resource", b =>
                {
                    b.Navigation("MomentResources");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Action", b =>
                {
                    b.Navigation("ModuleActions");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Module", b =>
                {
                    b.Navigation("ModuleActions");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.User", b =>
                {
                    b.Navigation("AlbumUsers");

                    b.Navigation("MomentUsers");

                    b.Navigation("UserFriends");
                });
#pragma warning restore 612, 618
        }
    }
}
