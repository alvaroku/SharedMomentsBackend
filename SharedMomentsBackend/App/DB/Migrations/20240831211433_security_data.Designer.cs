// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharedMomentsBackend.App.DB;

#nullable disable

namespace SharedMomentsBackend.App.DB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240831211433_security_data")]
    partial class security_data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.AlbumUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("AlbumUsers");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Moment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Moments");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.MomentResource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MomentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MomentId");

                    b.HasIndex("ResourceId");

                    b.ToTable("MomentResources");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.MomentUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("MomentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MomentId");

                    b.HasIndex("UserId");

                    b.ToTable("MomentUsers");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Size")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Action", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e66aa05c-4628-4fcb-afbb-217e2c3f0e8b"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9702),
                            IsActive = true,
                            Name = "Create",
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9703)
                        },
                        new
                        {
                            Id = new Guid("a955b6ce-7a2e-45eb-a57d-c10b14f7c7ae"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9704),
                            IsActive = true,
                            Name = "Read",
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9705)
                        },
                        new
                        {
                            Id = new Guid("0db32b7a-fa94-4631-938f-9c0a7aab0ad5"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9706),
                            IsActive = true,
                            Name = "Update",
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9706)
                        },
                        new
                        {
                            Id = new Guid("53823cac-e405-45a7-a0fa-c5d117a08f0e"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9708),
                            IsActive = true,
                            Name = "Delete",
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9708)
                        },
                        new
                        {
                            Id = new Guid("1548a1de-e522-4af1-859b-4e461af076b1"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9714),
                            IsActive = true,
                            Name = "ChangeStatus",
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9714)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0dcbe3fb-a8ea-4a2b-ac4e-512bd7a6d9cc"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9632),
                            IsActive = true,
                            Name = "Users",
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9633)
                        },
                        new
                        {
                            Id = new Guid("12f626da-7615-441e-8276-dfe9d958d67c"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9647),
                            IsActive = true,
                            Name = "Moments",
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9647)
                        },
                        new
                        {
                            Id = new Guid("6a465d4d-2c2a-46bc-9972-d3052fabc2c6"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9649),
                            IsActive = true,
                            Name = "Albums",
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9649)
                        },
                        new
                        {
                            Id = new Guid("be00908e-b067-411a-911b-9d0864c639f5"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9650),
                            IsActive = true,
                            Name = "Resources",
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9650)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.ModuleAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ModuleActions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3ff5e98-fb19-4e7d-ac74-ea77da425028"),
                            ActionId = new Guid("e66aa05c-4628-4fcb-afbb-217e2c3f0e8b"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9750),
                            IsActive = true,
                            ModuleId = new Guid("0dcbe3fb-a8ea-4a2b-ac4e-512bd7a6d9cc"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9750)
                        },
                        new
                        {
                            Id = new Guid("b1524a69-cdb9-4710-807b-884c2d14ba4c"),
                            ActionId = new Guid("a955b6ce-7a2e-45eb-a57d-c10b14f7c7ae"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9755),
                            IsActive = true,
                            ModuleId = new Guid("0dcbe3fb-a8ea-4a2b-ac4e-512bd7a6d9cc"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9755)
                        },
                        new
                        {
                            Id = new Guid("126d27af-566b-4549-af30-ce00f2c6bc2c"),
                            ActionId = new Guid("0db32b7a-fa94-4631-938f-9c0a7aab0ad5"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9756),
                            IsActive = true,
                            ModuleId = new Guid("0dcbe3fb-a8ea-4a2b-ac4e-512bd7a6d9cc"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9757)
                        },
                        new
                        {
                            Id = new Guid("a0232e7d-4501-4d70-b284-f90d748fadf5"),
                            ActionId = new Guid("53823cac-e405-45a7-a0fa-c5d117a08f0e"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9758),
                            IsActive = true,
                            ModuleId = new Guid("0dcbe3fb-a8ea-4a2b-ac4e-512bd7a6d9cc"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9758)
                        },
                        new
                        {
                            Id = new Guid("4de112c6-dbd8-4453-9714-b96cc8bf4395"),
                            ActionId = new Guid("1548a1de-e522-4af1-859b-4e461af076b1"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9759),
                            IsActive = true,
                            ModuleId = new Guid("0dcbe3fb-a8ea-4a2b-ac4e-512bd7a6d9cc"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9759)
                        },
                        new
                        {
                            Id = new Guid("3b395a7f-35be-46d5-9aa2-3a8b80786df2"),
                            ActionId = new Guid("e66aa05c-4628-4fcb-afbb-217e2c3f0e8b"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9762),
                            IsActive = true,
                            ModuleId = new Guid("12f626da-7615-441e-8276-dfe9d958d67c"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9762)
                        },
                        new
                        {
                            Id = new Guid("3a328088-d45e-4223-af67-e1bbbed96102"),
                            ActionId = new Guid("a955b6ce-7a2e-45eb-a57d-c10b14f7c7ae"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9766),
                            IsActive = true,
                            ModuleId = new Guid("12f626da-7615-441e-8276-dfe9d958d67c"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9766)
                        },
                        new
                        {
                            Id = new Guid("ba6f6592-ef99-4247-9483-6ecfc6403972"),
                            ActionId = new Guid("0db32b7a-fa94-4631-938f-9c0a7aab0ad5"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9767),
                            IsActive = true,
                            ModuleId = new Guid("12f626da-7615-441e-8276-dfe9d958d67c"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9767)
                        },
                        new
                        {
                            Id = new Guid("b10b7290-03fe-401e-9a33-9a725a97aa82"),
                            ActionId = new Guid("53823cac-e405-45a7-a0fa-c5d117a08f0e"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9768),
                            IsActive = true,
                            ModuleId = new Guid("12f626da-7615-441e-8276-dfe9d958d67c"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9769)
                        },
                        new
                        {
                            Id = new Guid("7760eea6-fae4-4529-ac17-4b11977c1551"),
                            ActionId = new Guid("1548a1de-e522-4af1-859b-4e461af076b1"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9770),
                            IsActive = true,
                            ModuleId = new Guid("12f626da-7615-441e-8276-dfe9d958d67c"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9771)
                        },
                        new
                        {
                            Id = new Guid("47d20fab-d459-430f-a377-72f9daf6aa81"),
                            ActionId = new Guid("e66aa05c-4628-4fcb-afbb-217e2c3f0e8b"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9772),
                            IsActive = true,
                            ModuleId = new Guid("6a465d4d-2c2a-46bc-9972-d3052fabc2c6"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9772)
                        },
                        new
                        {
                            Id = new Guid("597d4e64-7f26-436f-92c7-62982dfa27b3"),
                            ActionId = new Guid("a955b6ce-7a2e-45eb-a57d-c10b14f7c7ae"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9773),
                            IsActive = true,
                            ModuleId = new Guid("6a465d4d-2c2a-46bc-9972-d3052fabc2c6"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9773)
                        },
                        new
                        {
                            Id = new Guid("3889a17f-b06d-4b02-ac4b-b43f72e331e8"),
                            ActionId = new Guid("0db32b7a-fa94-4631-938f-9c0a7aab0ad5"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9774),
                            IsActive = true,
                            ModuleId = new Guid("6a465d4d-2c2a-46bc-9972-d3052fabc2c6"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9775)
                        },
                        new
                        {
                            Id = new Guid("1ddd034c-aa05-4c7c-897a-c8ffb728718b"),
                            ActionId = new Guid("53823cac-e405-45a7-a0fa-c5d117a08f0e"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9775),
                            IsActive = true,
                            ModuleId = new Guid("6a465d4d-2c2a-46bc-9972-d3052fabc2c6"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9776)
                        },
                        new
                        {
                            Id = new Guid("1e70d0dc-fff2-4aef-8ba8-ab4f84f41681"),
                            ActionId = new Guid("1548a1de-e522-4af1-859b-4e461af076b1"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9778),
                            IsActive = true,
                            ModuleId = new Guid("6a465d4d-2c2a-46bc-9972-d3052fabc2c6"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9779)
                        },
                        new
                        {
                            Id = new Guid("898dfaf9-92a6-4448-aed5-6a93bdc71a93"),
                            ActionId = new Guid("e66aa05c-4628-4fcb-afbb-217e2c3f0e8b"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9780),
                            IsActive = true,
                            ModuleId = new Guid("be00908e-b067-411a-911b-9d0864c639f5"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9780)
                        },
                        new
                        {
                            Id = new Guid("66d8ae98-a951-42ab-bd01-a3dcc848179f"),
                            ActionId = new Guid("a955b6ce-7a2e-45eb-a57d-c10b14f7c7ae"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9781),
                            IsActive = true,
                            ModuleId = new Guid("be00908e-b067-411a-911b-9d0864c639f5"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9781)
                        },
                        new
                        {
                            Id = new Guid("cd82a094-9c1d-4ab6-a319-3715eede1055"),
                            ActionId = new Guid("0db32b7a-fa94-4631-938f-9c0a7aab0ad5"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9783),
                            IsActive = true,
                            ModuleId = new Guid("be00908e-b067-411a-911b-9d0864c639f5"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9783)
                        },
                        new
                        {
                            Id = new Guid("5a45b57c-ba1d-41ae-b880-066060de4b60"),
                            ActionId = new Guid("53823cac-e405-45a7-a0fa-c5d117a08f0e"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9784),
                            IsActive = true,
                            ModuleId = new Guid("be00908e-b067-411a-911b-9d0864c639f5"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9785)
                        },
                        new
                        {
                            Id = new Guid("1cfca5cd-5a94-48d3-a190-de67d90b7f09"),
                            ActionId = new Guid("1548a1de-e522-4af1-859b-4e461af076b1"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9786),
                            IsActive = true,
                            ModuleId = new Guid("be00908e-b067-411a-911b-9d0864c639f5"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(9786)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModuleActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ModuleActionId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6aa19874-1db9-4ebb-83aa-860226827d6b"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(167),
                            IsActive = true,
                            ModuleActionId = new Guid("c3ff5e98-fb19-4e7d-ac74-ea77da425028"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(167)
                        },
                        new
                        {
                            Id = new Guid("2621a768-e7b4-414a-a57b-984127be5383"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(173),
                            IsActive = true,
                            ModuleActionId = new Guid("b1524a69-cdb9-4710-807b-884c2d14ba4c"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(174)
                        },
                        new
                        {
                            Id = new Guid("bb48d020-203a-41fb-9767-4c0f00f66760"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(175),
                            IsActive = true,
                            ModuleActionId = new Guid("126d27af-566b-4549-af30-ce00f2c6bc2c"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(175)
                        },
                        new
                        {
                            Id = new Guid("8d79725f-7b37-4111-83fc-ac49d5902856"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(180),
                            IsActive = true,
                            ModuleActionId = new Guid("a0232e7d-4501-4d70-b284-f90d748fadf5"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(180)
                        },
                        new
                        {
                            Id = new Guid("26c8bfd5-001c-4590-aa44-3f842e5d53d1"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(181),
                            IsActive = true,
                            ModuleActionId = new Guid("4de112c6-dbd8-4453-9714-b96cc8bf4395"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(182)
                        },
                        new
                        {
                            Id = new Guid("78b54657-cc00-4e24-a2f0-442f1212683c"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(183),
                            IsActive = true,
                            ModuleActionId = new Guid("3b395a7f-35be-46d5-9aa2-3a8b80786df2"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(183)
                        },
                        new
                        {
                            Id = new Guid("45c0f253-4027-443b-9e54-f40cc8abff30"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(184),
                            IsActive = true,
                            ModuleActionId = new Guid("3a328088-d45e-4223-af67-e1bbbed96102"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(185)
                        },
                        new
                        {
                            Id = new Guid("1eb405af-92ab-4511-8286-9147cb6caadd"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(186),
                            IsActive = true,
                            ModuleActionId = new Guid("ba6f6592-ef99-4247-9483-6ecfc6403972"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(186)
                        },
                        new
                        {
                            Id = new Guid("ca2287e6-d1ff-4abe-b513-2d5ee6686363"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(187),
                            IsActive = true,
                            ModuleActionId = new Guid("b10b7290-03fe-401e-9a33-9a725a97aa82"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(187)
                        },
                        new
                        {
                            Id = new Guid("dfa65478-2ae3-433a-9279-d88e4c593a5d"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(188),
                            IsActive = true,
                            ModuleActionId = new Guid("7760eea6-fae4-4529-ac17-4b11977c1551"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(189)
                        },
                        new
                        {
                            Id = new Guid("5ad92960-edb7-4fa0-a988-c903bd8990b3"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(190),
                            IsActive = true,
                            ModuleActionId = new Guid("47d20fab-d459-430f-a377-72f9daf6aa81"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(190)
                        },
                        new
                        {
                            Id = new Guid("aa62d662-d418-49c6-9355-e8e0756619f9"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(193),
                            IsActive = true,
                            ModuleActionId = new Guid("597d4e64-7f26-436f-92c7-62982dfa27b3"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(193)
                        },
                        new
                        {
                            Id = new Guid("c1d9a350-753d-4f13-b1b0-674bbb34f127"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(194),
                            IsActive = true,
                            ModuleActionId = new Guid("3889a17f-b06d-4b02-ac4b-b43f72e331e8"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(194)
                        },
                        new
                        {
                            Id = new Guid("2e7c1af5-10af-4299-b14b-9d0232e5406b"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(195),
                            IsActive = true,
                            ModuleActionId = new Guid("1ddd034c-aa05-4c7c-897a-c8ffb728718b"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(196)
                        },
                        new
                        {
                            Id = new Guid("44144e79-c67b-4c8c-b238-f405b622a4b4"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(197),
                            IsActive = true,
                            ModuleActionId = new Guid("1e70d0dc-fff2-4aef-8ba8-ab4f84f41681"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(197)
                        },
                        new
                        {
                            Id = new Guid("4399b19f-3d81-4d6c-8bb5-dc1bd3da48ce"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(198),
                            IsActive = true,
                            ModuleActionId = new Guid("898dfaf9-92a6-4448-aed5-6a93bdc71a93"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(199)
                        },
                        new
                        {
                            Id = new Guid("c2a3ec14-1084-4986-a9df-38b0662d3988"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(200),
                            IsActive = true,
                            ModuleActionId = new Guid("66d8ae98-a951-42ab-bd01-a3dcc848179f"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(200)
                        },
                        new
                        {
                            Id = new Guid("e845915d-b751-4e41-b62e-8c08db34c5bf"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(201),
                            IsActive = true,
                            ModuleActionId = new Guid("cd82a094-9c1d-4ab6-a319-3715eede1055"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(201)
                        },
                        new
                        {
                            Id = new Guid("e520bae3-c34c-4719-ad8c-74ec3a1c8d44"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(202),
                            IsActive = true,
                            ModuleActionId = new Guid("5a45b57c-ba1d-41ae-b880-066060de4b60"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(202)
                        },
                        new
                        {
                            Id = new Guid("7c1435ae-8302-4f94-a4ca-4805e6e86d43"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(205),
                            IsActive = true,
                            ModuleActionId = new Guid("1cfca5cd-5a94-48d3-a190-de67d90b7f09"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(205)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(8331),
                            IsActive = true,
                            Name = "Admin",
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(8334)
                        },
                        new
                        {
                            Id = new Guid("4c059b07-b5d3-4132-8114-fc3440a7710d"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(8336),
                            IsActive = true,
                            Name = "User",
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(8336)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6166af2a-a810-4eae-a178-5ac43c19a842"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(283),
                            IsActive = true,
                            PermissionId = new Guid("6aa19874-1db9-4ebb-83aa-860226827d6b"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(283)
                        },
                        new
                        {
                            Id = new Guid("1a38b735-6392-40c5-9107-584e24a0f849"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(315),
                            IsActive = true,
                            PermissionId = new Guid("2621a768-e7b4-414a-a57b-984127be5383"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(316)
                        },
                        new
                        {
                            Id = new Guid("fda9ac36-4a2f-45a7-ba24-a2436d1900b3"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(322),
                            IsActive = true,
                            PermissionId = new Guid("bb48d020-203a-41fb-9767-4c0f00f66760"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(322)
                        },
                        new
                        {
                            Id = new Guid("1997f47b-2979-49af-a132-ddab30593d60"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(327),
                            IsActive = true,
                            PermissionId = new Guid("8d79725f-7b37-4111-83fc-ac49d5902856"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(327)
                        },
                        new
                        {
                            Id = new Guid("a98f91ae-1b83-46a3-b558-4520114dcfd3"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(333),
                            IsActive = true,
                            PermissionId = new Guid("26c8bfd5-001c-4590-aa44-3f842e5d53d1"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(333)
                        },
                        new
                        {
                            Id = new Guid("b3502469-5b16-4cad-902a-4f85718d1027"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(341),
                            IsActive = true,
                            PermissionId = new Guid("26c8bfd5-001c-4590-aa44-3f842e5d53d1"),
                            RoleId = new Guid("4c059b07-b5d3-4132-8114-fc3440a7710d"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(342)
                        },
                        new
                        {
                            Id = new Guid("209f7418-b6ac-4be4-ae6b-e64aa9bf7828"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(344),
                            IsActive = true,
                            PermissionId = new Guid("78b54657-cc00-4e24-a2f0-442f1212683c"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(344)
                        },
                        new
                        {
                            Id = new Guid("20039998-7fab-4f7c-835b-5ee6ac4b21d6"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(358),
                            IsActive = true,
                            PermissionId = new Guid("78b54657-cc00-4e24-a2f0-442f1212683c"),
                            RoleId = new Guid("4c059b07-b5d3-4132-8114-fc3440a7710d"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(358)
                        },
                        new
                        {
                            Id = new Guid("8b02b1d4-5c78-44ab-bfd0-8853092f99ca"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(360),
                            IsActive = true,
                            PermissionId = new Guid("45c0f253-4027-443b-9e54-f40cc8abff30"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(361)
                        },
                        new
                        {
                            Id = new Guid("87a685fa-ed0e-4b9b-96b5-1ddc1eedafb5"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(369),
                            IsActive = true,
                            PermissionId = new Guid("45c0f253-4027-443b-9e54-f40cc8abff30"),
                            RoleId = new Guid("4c059b07-b5d3-4132-8114-fc3440a7710d"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(369)
                        },
                        new
                        {
                            Id = new Guid("43382802-75fa-43be-a72f-95e724989a7f"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(371),
                            IsActive = true,
                            PermissionId = new Guid("1eb405af-92ab-4511-8286-9147cb6caadd"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(371)
                        },
                        new
                        {
                            Id = new Guid("026cadb6-3d55-4db8-949a-0b9bbbaa4a63"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(377),
                            IsActive = true,
                            PermissionId = new Guid("1eb405af-92ab-4511-8286-9147cb6caadd"),
                            RoleId = new Guid("4c059b07-b5d3-4132-8114-fc3440a7710d"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(377)
                        },
                        new
                        {
                            Id = new Guid("a8887fef-858b-4126-84a4-9e14c705dac6"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(379),
                            IsActive = true,
                            PermissionId = new Guid("ca2287e6-d1ff-4abe-b513-2d5ee6686363"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(379)
                        },
                        new
                        {
                            Id = new Guid("a5cb346a-d3d4-40a8-a152-affb02bae7f3"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(680),
                            IsActive = true,
                            PermissionId = new Guid("dfa65478-2ae3-433a-9279-d88e4c593a5d"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(681)
                        },
                        new
                        {
                            Id = new Guid("596d5ef4-a60f-44ee-9fe5-44beaacdce8e"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(705),
                            IsActive = true,
                            PermissionId = new Guid("dfa65478-2ae3-433a-9279-d88e4c593a5d"),
                            RoleId = new Guid("4c059b07-b5d3-4132-8114-fc3440a7710d"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(705)
                        },
                        new
                        {
                            Id = new Guid("e0423ddf-f86d-4f32-88bf-f2359b8f47fc"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(712),
                            IsActive = true,
                            PermissionId = new Guid("5ad92960-edb7-4fa0-a988-c903bd8990b3"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(712)
                        },
                        new
                        {
                            Id = new Guid("9045e8d9-54cf-4fb0-ba11-30e651c3f312"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(719),
                            IsActive = true,
                            PermissionId = new Guid("5ad92960-edb7-4fa0-a988-c903bd8990b3"),
                            RoleId = new Guid("4c059b07-b5d3-4132-8114-fc3440a7710d"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(719)
                        },
                        new
                        {
                            Id = new Guid("cc9b0880-b249-43aa-9e6c-a56b93e9d0fd"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(726),
                            IsActive = true,
                            PermissionId = new Guid("aa62d662-d418-49c6-9355-e8e0756619f9"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(726)
                        },
                        new
                        {
                            Id = new Guid("9c9c296f-0ab0-4a15-a238-4b3ece52f9da"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(733),
                            IsActive = true,
                            PermissionId = new Guid("aa62d662-d418-49c6-9355-e8e0756619f9"),
                            RoleId = new Guid("4c059b07-b5d3-4132-8114-fc3440a7710d"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(733)
                        },
                        new
                        {
                            Id = new Guid("b6943a35-5717-4730-879d-d0c109e27467"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(735),
                            IsActive = true,
                            PermissionId = new Guid("c1d9a350-753d-4f13-b1b0-674bbb34f127"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(735)
                        },
                        new
                        {
                            Id = new Guid("9a9c5ef1-e9ea-45fe-aef6-c74adacda472"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(742),
                            IsActive = true,
                            PermissionId = new Guid("c1d9a350-753d-4f13-b1b0-674bbb34f127"),
                            RoleId = new Guid("4c059b07-b5d3-4132-8114-fc3440a7710d"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(742)
                        },
                        new
                        {
                            Id = new Guid("8803eac0-27ee-46e4-8327-924803ae2123"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(744),
                            IsActive = true,
                            PermissionId = new Guid("2e7c1af5-10af-4299-b14b-9d0232e5406b"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(744)
                        },
                        new
                        {
                            Id = new Guid("750f03e3-51d3-498a-acaf-4dcebd58317a"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(753),
                            IsActive = true,
                            PermissionId = new Guid("44144e79-c67b-4c8c-b238-f405b622a4b4"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(753)
                        },
                        new
                        {
                            Id = new Guid("d32549cc-441b-4bf2-8fe6-ce93239c2bc6"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(763),
                            IsActive = true,
                            PermissionId = new Guid("44144e79-c67b-4c8c-b238-f405b622a4b4"),
                            RoleId = new Guid("4c059b07-b5d3-4132-8114-fc3440a7710d"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(763)
                        },
                        new
                        {
                            Id = new Guid("442e0dc4-eb8b-41d1-8b1a-2c4b67d1b8d0"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(765),
                            IsActive = true,
                            PermissionId = new Guid("4399b19f-3d81-4d6c-8bb5-dc1bd3da48ce"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(765)
                        },
                        new
                        {
                            Id = new Guid("3a86c3f3-dd76-44b1-8c00-de2f5fcca13d"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(773),
                            IsActive = true,
                            PermissionId = new Guid("c2a3ec14-1084-4986-a9df-38b0662d3988"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(773)
                        },
                        new
                        {
                            Id = new Guid("02514686-7daa-4276-b30a-949bd0d64cb5"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(780),
                            IsActive = true,
                            PermissionId = new Guid("e845915d-b751-4e41-b62e-8c08db34c5bf"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(780)
                        },
                        new
                        {
                            Id = new Guid("2c303653-0069-4a26-9c42-f188ef0f18da"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(788),
                            IsActive = true,
                            PermissionId = new Guid("e520bae3-c34c-4719-ad8c-74ec3a1c8d44"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(788)
                        },
                        new
                        {
                            Id = new Guid("42d63ac8-1eab-4412-8dfd-731a9944edb3"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(796),
                            IsActive = true,
                            PermissionId = new Guid("7c1435ae-8302-4f94-a4ca-4805e6e86d43"),
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(796)
                        },
                        new
                        {
                            Id = new Guid("915556db-cc4c-4593-9431-5890875807c0"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(809),
                            IsActive = true,
                            PermissionId = new Guid("7c1435ae-8302-4f94-a4ca-4805e6e86d43"),
                            RoleId = new Guid("4c059b07-b5d3-4132-8114-fc3440a7710d"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 994, DateTimeKind.Utc).AddTicks(809)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e04fd15-75e1-4ebf-95e3-73ba7ceb52af"),
                            CreatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(8528),
                            DateOfBirth = new DateTime(2000, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alvaroku123@gmail.com",
                            IsActive = true,
                            Name = "Alvaro Kú",
                            PasswordHash = "b2867617492e26c338ab49f72afabc984d798b59755a27e312b953716ae964d7",
                            PhoneNumber = "9919596720",
                            RoleId = new Guid("ea542f89-7b2a-450e-ada6-fb2d9c77d891"),
                            UpdatedAt = new DateTime(2024, 8, 31, 21, 14, 32, 993, DateTimeKind.Utc).AddTicks(8528)
                        });
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Album", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.AlbumUser", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Album", "Album")
                        .WithMany("AlbumUsers")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.User", "User")
                        .WithMany("AlbumUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Moment", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Album", "Album")
                        .WithMany("Moments")
                        .HasForeignKey("AlbumId");

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.MomentResource", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Moment", "Moment")
                        .WithMany("MomentResources")
                        .HasForeignKey("MomentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Resource", "Resource")
                        .WithMany("MomentResources")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moment");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.MomentUser", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Moment", "Moment")
                        .WithMany("MomentUsers")
                        .HasForeignKey("MomentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.User", "User")
                        .WithMany("MomentUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.ModuleAction", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Security.Action", "Action")
                        .WithMany("ModuleActions")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Security.Module", "Module")
                        .WithMany("ModuleActions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Permission", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Security.ModuleAction", "ModuleAction")
                        .WithMany()
                        .HasForeignKey("ModuleActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModuleAction");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.RolePermission", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Security.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Security.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.User", b =>
                {
                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Resource", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.HasOne("SharedMomentsBackend.App.Models.Entities.Security.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Album", b =>
                {
                    b.Navigation("AlbumUsers");

                    b.Navigation("Moments");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Moment", b =>
                {
                    b.Navigation("MomentResources");

                    b.Navigation("MomentUsers");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Resource", b =>
                {
                    b.Navigation("MomentResources");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Action", b =>
                {
                    b.Navigation("ModuleActions");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Module", b =>
                {
                    b.Navigation("ModuleActions");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.Security.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("SharedMomentsBackend.App.Models.Entities.User", b =>
                {
                    b.Navigation("AlbumUsers");

                    b.Navigation("MomentUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
